{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","students","name","email","CardList","map","key","id","SearchBox","placeholder","handleChange","type","onChange","Header","Menu","SubMenu","Layout","Content","App","Sider","state","searchField","string","raushan","fetch","then","response","json","users","setState","this","filteredStudents","filter","toLowerCase","includes","theme","mode","defaultSelectedKeys","style","lineHeight","Item","padding","margin","background","minHeight","e","target","value","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kVAemBA,G,qBATK,SAAAC,GAAK,OACrB,yBAAKC,UAAU,kBACX,yBAAKC,IAAI,WAAWC,IAAK,oEACzB,4BAAKH,EAAMI,SAASC,MACpB,2BAAIL,EAAMI,SAASC,MACnB,2BAAIL,EAAMI,SAASE,UCJdC,G,OAAW,SAAAP,GAAK,OACzB,yBAAKC,UAAU,aACVD,EAAMI,SAASI,KAAI,SAAAJ,GAAQ,OAGxB,kBAAC,EAAD,CAAMK,IAAKL,EAASM,GAAIN,SAAUA,U,mCCTrCO,G,cAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAcC,EAAhB,EAAgBA,aAAhB,OAGrB,2BACIZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCKVG,GADYC,IAAZC,QAC2BC,IAA3BH,QAAQI,EAAmBD,IAAnBC,QAyGDC,GAzGoBF,IAAVG,M,YAKvB,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CAEXnB,SAAS,GAeToB,YAAc,GACdC,OAAQ,oCACRC,QAAQ,oCArBE,E,iFA0BM,IAAD,OACjBC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAAC5B,SAAU2B,S,+BAInC,IAAD,SAE2BE,KAAKV,MAA/BnB,EAFD,EAECA,SAAWoB,EAFZ,EAEYA,YAEZU,EAAmB9B,EAAS+B,QAAQ,SAAA/B,GAAQ,OAChDA,EAASC,KAAK+B,cAAcC,SAASb,EAAYY,kBAGnD,OACE,yBAAKnC,UAAU,OAEb,kBAAC,IAAD,KACJ,kBAACe,EAAD,CAAQf,UAAU,UAChB,yBAAKA,UAAU,SACf,kBAAC,IAAD,CACEqC,MAAM,OACNC,KAAK,aACLC,oBAAqB,CAAC,KACtBC,MAAO,CAAEC,WAAY,SAErB,kBAAC,IAAKC,KAAN,CAAWlC,IAAI,KAAf,SACA,kBAAC,IAAKkC,KAAN,CAAWlC,IAAI,KAAf,SACA,kBAAC,IAAKkC,KAAN,CAAWlC,IAAI,KAAf,WAGJ,kBAAC,IAAD,KAEE,kBAAC,IAAD,CAAQgC,MAAO,CAAEG,QAAS,gBACxB,kBAAC,IAAD,CAAYH,MAAO,CAAEI,OAAQ,WAC3B,kBAAC,IAAWF,KAAZ,aACA,kBAAC,IAAWA,KAAZ,aACA,kBAAC,IAAWA,KAAZ,aAEF,kBAACvB,EAAD,CACEqB,MAAO,CACLK,WAAY,OACZF,QAAS,GACTC,OAAQ,EACRE,UAAW,MAGb,oDACQ,4DAEA,kBAAC,EAAD,CACEnC,YAAY,kBACZC,aAAc,SAAAmC,GAAC,OAAI,EAAKhB,SAAS,CAACR,YAAawB,EAAEC,OAAOC,WAE1D,kBAAC,IAAD,MACA,kBAAC,EAAD,CAAU9C,SAAU8B,a,GAnFpBiB,cCPEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnC,MAAK,SAAAoC,GACjCA,EAAaC,kB","file":"static/js/main.474d7d28.chunk.js","sourcesContent":["import React from 'react';\n\nimport './card.styles.css';\n\n\n\n    export const Card = props => (\n        <div className='card-container'>\n            <img alt=\"students\" src={'https://robohash.org/${props.students.id}?set=set2&size=180x180'}/>\n            <h2>{props.students.name}</h2>\n            <p>{props.students.name}</p>\n            <p>{props.students.email}</p>\n        </div>\n    );\n\n    export default Card;","import React from 'react';\nimport Card from '../card/card.component';\nimport './card-list.styles.css';\n\n\n\n\n    export const CardList = props => (\n        <div className='card-list'>\n            {props.students.map(students => (\n        \n                \n                <Card key={students.id} students={students} />\n                \n            ) )}\n        </div>\n    );\n    ","import React from 'react';\nimport './search-box.styles.css';\n\nexport const SearchBox = ({placeholder , handleChange}) => (\n\n    \n    <input \n        className='search'\n        type='search' \n        placeholder={placeholder}\n        onChange={handleChange}\n    />\n\n);","import React, { Component } from 'react';\n\nimport './App.css';\nimport 'antd/dist/antd.css';\n\nimport { CardList } from './components/card-list/card-list.component';\n\nimport { Layout, Menu, Divider, Table , Icon , Breadcrumb } from 'antd';\nimport { render } from '@testing-library/react';\n\nimport { SearchBox } from './components/search-box/search-box.component';\n\n\n\nconst { SubMenu } = Menu;\nconst { Header, Content, Sider } = Layout;\n\n\n\nclass App extends Component {\n  constructor (){\n    super();\n    this.state = {\n\n      students:[\n        //creating hard coded students data.....\n        // {\n        //   name:'raushan',\n        //   id:'stu1'\n        // },\n        // {\n        //   name:'gaurav',\n        //   id:'stu2'\n        // },\n        // {\n        //   name:'madhur',\n        //   id:'stud3'\n        // }\n      ],\n      searchField : '',\n      string: \"hello i am coding like champ.....\",\n      raushan:\"no i am only front end developer\"\n    };\n  }\n\n  //fetching dynamic content from online json file........\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({students: users }));\n  }\n\n\n  render(){\n\n    const {students , searchField} = this.state;\n\n    const filteredStudents = students.filter( students =>\n      students.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    return (\n      <div className=\"App\">\n       \n        <Layout>\n    <Header className=\"header\">\n      <div className=\"logo\" />\n      <Menu\n        theme=\"dark\"\n        mode=\"horizontal\"\n        defaultSelectedKeys={['2']}\n        style={{ lineHeight: '64px' }}\n      >\n        <Menu.Item key=\"1\">nav 1</Menu.Item>\n        <Menu.Item key=\"2\">nav 2</Menu.Item>\n        <Menu.Item key=\"3\">nav 3</Menu.Item>\n      </Menu>\n    </Header>\n    <Layout>\n      \n      <Layout style={{ padding: '0 24px 24px' }}>\n        <Breadcrumb style={{ margin: '16px 0' }}>\n          <Breadcrumb.Item>Home</Breadcrumb.Item>\n          <Breadcrumb.Item>List</Breadcrumb.Item>\n          <Breadcrumb.Item>App</Breadcrumb.Item>\n        </Breadcrumb>\n        <Content\n          style={{\n            background: '#fff',\n            padding: 24,\n            margin: 0,\n            minHeight: 280,\n          }}\n        >\n          <h1>STUDENTS SEARCH LIST</h1>\n                  <p>In this project filter used..</p>\n                  \n                  <SearchBox \n                    placeholder='search students'\n                    handleChange={e => this.setState({searchField: e.target.value})}\n                  />\n                  <Divider/>\n                  <CardList students={filteredStudents}>\n                        \n                  </CardList>\n        </Content>\n      </Layout>\n    </Layout>\n  </Layout>\n\n\n\n\n                  \n              \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}